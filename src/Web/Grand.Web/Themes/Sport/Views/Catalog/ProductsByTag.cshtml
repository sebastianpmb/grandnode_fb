@model ProductsByTagModel
@inject SeoSettings seoSettings
@inject IPageHeadBuilder pagebuilder
@{
    Layout = "_TwoColumns";

    //title
    pagebuilder.AddTitleParts(string.Format(Loc["Title.ProductsByTag"], Model.TagName));

    //canonical URL
    var canonicalUrlsEnabled = seoSettings.CanonicalUrlsEnabled;
    if (canonicalUrlsEnabled)
    {
        var productsByTagUrl = Url.RouteUrl("ProductsByTag", new { productTagId = Model.Id, SeName = Model.TagSeName }, this.Url.ActionContext.HttpContext.Request.Scheme);
        pagebuilder.AddCanonicalUrlParts(productsByTagUrl);
    }
}
<div class="page product-tag-page">
    <h1 class="generalTitle h2">@String.Format(Loc["Products.Tags.ProductsTaggedWith"], Model.TagName)</h1>
    @await Component.InvokeAsync("Widget", new { widgetZone = "productsbytag_top", additionalData = Model.Id })
    <div id="catalog-products">
        <partial name="_Selectors" />
        <template v-if="catalog.Model.Products.length > 0">
            <template v-if="catalog.Model.PagingFilteringContext.ViewMode == 'grid'">
                <b-col cols="12" class="product-grid px-0">
                    <b-form-row>
                        <template v-for="Model in catalog.Model.Products">
                            <b-col lg="4" sm="6" cols="6" class="product-container new-col-6 mb-2">
                                <partial name="_ProductBoxVue" />
                            </b-col>
                        </template>
                    </b-form-row>
                </b-col>
            </template>
            <template v-else>
                <div class="product-list">
                    <b-col cols="12">
                        <b-row class="justify-content-between">
                            <template v-for="Model in catalog.Model.Products">
                                <partial name="_ProductBoxListVue" />
                            </template>
                        </b-row>
                    </b-col>
                </div>
            </template>
            <partial name="_Pagination" />
        </template>
                <template v-else>
            <b-alert variant="info" show class="my-3">
                @Loc["search.noresultstext"]
            </b-alert>
        </template>
    </div>
</div>
@await Component.InvokeAsync("Widget", new { widgetZone = "productsbytag_bottom", additionalData = Model.Id })

<partial name="_ModelScript" model="@Json.Serialize(Model)" />