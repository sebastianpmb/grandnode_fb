@model BlogPostModel
@using Grand.Web.Models.Blogs;
@inject IWorkContext workContext
@inject IPageHeadBuilder pagebuilder
@{
    Layout = "_TwoColumns";

    //title
    pagebuilder.AddTitleParts(!String.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Title);
    pagebuilder.AddMetaDescriptionParts(Model.MetaDescription);
    pagebuilder.AddMetaKeywordParts(Model.MetaKeywords);

    var supportRtl = workContext.WorkingLanguage.Rtl;

    if (supportRtl)
    {
        <link rel="stylesheet" type="text/css" asp-src="/Themes/furniture/Content/css/blog-news/blog-news.rtl.css">
    }
    else
    {
        <link rel="stylesheet" type="text/css" asp-src="/Themes/furniture/Content/css/blog-news/blog-news.css">
    }
}
@section left {
    @await Component.InvokeAsync("Widget", new { widgetZone = "left_side_column_blog_before" })
    @await Component.InvokeAsync("BlogCategories")
    @await Component.InvokeAsync("Widget", new { widgetZone = "left_side_column_before_blog_archive" })
    @await Component.InvokeAsync("BlogMonths")
    @await Component.InvokeAsync("Widget", new { widgetZone = "left_side_column_after_blog_archive" })
    @await Component.InvokeAsync("BlogTags")
    @await Component.InvokeAsync("Widget", new { widgetZone = "left_side_column_blog_after" })
}
<div class="page blogpost-page">
    <div class="container">
        <a class="left-side-toggler" onclick="sideToggle()">
            <div class="inner">
                <span></span>
                <span></span>
                <span></span>
            </div>
            <div class="text">
                @Loc["catalog.selectors.fiters"]
            </div>
        </a>
        @await Component.InvokeAsync("Widget", new { widgetZone = "blogpost_page_top", additionalData = Model.Id })
        <b-card class="post-news-page mt-3">
            <template v-slot:header>
                @if (!string.IsNullOrEmpty(Model.PictureModel.ImageUrl))
                {
                    <img class="img-fluid" src="@Model.PictureModel.ImageUrl" alt="@Model.PictureModel.AlternateText" />
                }
                <div class="content">
                    <h1 class="h5 title">
                        @Model.Title
                    </h1>
                    <div class="date">
                        @Model.CreatedOn.ToString("D")
                    </div>
                </div>
            </template>
            @await Component.InvokeAsync("Widget", new { widgetZone = "blogpost_page_before_body", additionalData = Model.Id })
            @Html.Raw(Model.Body)
        </b-card>

        @await Component.InvokeAsync("Widget", new { widgetZone = "blogpost_page_before_products", additionalData = Model.Id })

        @await Component.InvokeAsync("BlogPostProducts", new { blogPostId = Model.Id })

        @if (Model.Tags.Any())
        {
            <div class="tags generalMarginSupporter">
                <div class="col-form-label w-100">@Loc["Blog.Tags"]:</div>
                @for (int i = 0; i < Model.Tags.Count; i++)
                {
                    var tag = Model.Tags[i];
                    <b-button variant="light" size="sm" class="mr-2 mb-2" href="@Url.RouteUrl("BlogByTag", new {tag = tag})">@tag</b-button>
                }
            </div>
        }

        @await Component.InvokeAsync("Widget", new { widgetZone = "blogpost_page_before_comments", additionalData = Model.Id })
        @if (Model.AllowComments)
        {
            <div class="fieldset new-comment generalMarginSupporter d-flex flex-column w-100" id="comments">
                <h4 class="generalTitle generalMarginSupporter">@Loc["Blog.Comments.LeaveYourComment"]</h4>
                <div class="notifications">
                    <div asp-validation-summary="ModelOnly" class="message-error"></div>
                    @{
                        var result = TempData["Grand.blog.addcomment.result"] as string;
                    }
                    @if (!String.IsNullOrEmpty(result))
                    {
                        <div class="result card bg-teal border-0 p-3 text-white">@result</div>
                    }
                </div>
                <form asp-route="BlogPost" asp-route-sename="@Model.SeName" method="post">
                    <input type="hidden" name="blogPostId" value="@Model.Id" />
                    <div class="form-fields">
                        <div class="form-group">
                            <label asp-for="AddNewComment.CommentText" class="col-form-label">@Loc["Blog.Comments.CommentText"]:</label>
                            <textarea asp-for="AddNewComment.CommentText" class="enter-comment-text form-control"></textarea>
                            <span asp-validation-for="AddNewComment.CommentText"></span>
                        </div>
                        @if (Model.AddNewComment.DisplayCaptcha)
                        {
                            <div class="captcha-box">
                                <captcha />
                            </div>
                        }
                    </div>
                    <div class="buttons text-xs-center text-md-left generalMarginSupporter">
                        <input type="submit" asp-action="BlogCommentAdd" name="add-comment" class="btn btn-outline-secondary blog-post-add-comment-button" value="@Loc["Blog.Comments.SubmitButton"]" />
                    </div>
                </form>
            </div>
            if (Model.Comments.Any())
            {
                <div class="comment-list">
                    <h4 class="generalTitle generalMarginSupporter"><strong>@Loc["Blog.Comments"]</strong></h4>
                    <div class="comments">
                        @foreach (var comment in Model.Comments)
                        {
                            <b-card class="mb-3">
                                <template v-slot:header>
                                    <div class="d-inline-flex w-100">
                                        <h6 class="mb-0">@comment.CustomerName</h6>
                                        <b-icon icon="calendar2-check" variant="teal" class="mx-2"></b-icon>
                                        <small class="date text-dark">
                                            <span>@Loc["Blog.Comments.CreatedOn"]:</span>
                                            <span>@comment.CreatedOn.ToString("g")</span>
                                        </small>
                                    </div>
                                </template>
                                <b-col cols="12" class="px-0">
                                    <b-row>
                                        <b-col>
                                            @comment.CommentText
                                        </b-col>
                                    </b-row>
                                </b-col>
                            </b-card>
                        }
                    </div>
                </div>
            }
        }
        @await Component.InvokeAsync("Widget", new { widgetZone = "blogpost_page_after_comments", additionalData = Model.Id })
        @await Component.InvokeAsync("Widget", new { widgetZone = "blogpost_page_bottom", additionalData = Model.Id })
    </div>
</div>
